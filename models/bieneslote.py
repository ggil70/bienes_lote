# -*- coding: utf-8 -*-
##############################################################################
#
#    odoo, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the Odoo plugin for Dia !
#from odoo.osv import fields, osv, orm
from odoo import api, fields, models


from odoo.exceptions import ValidationError


#from odoo.osv.orm import except_orm
#from odoo.exceptions import ValidationError,except_orm, Warning, RedirectWarning

#Importamos la libreria logger
import logging 
#Definimos la Variable Global
#_logger = logging.getLogger(__name__)  
global res, catego, grupo , oficina
#res = 0


  




class bieneslote_deta_rel(models.Model):
    #_inherit = 'bieneslote'
    #     """Registra el detalle de los movimientos"""
    _name = 'bieneslote_deta_rel'
    _rec_name = 'bienes_numbien'
   
    #     #res = ()

   # lote_bienes_id = fields.Many2one('bieneslote', 'Bien', delegate=True)
    bienes_numbien = fields.Char('Numero del Bien',size=20, help='Registra el Número de Bien Nacional')
    oficinas_id = fields.Many2one('bieneslote','Oficina', store = True)
    
    serial = fields.Char('Serial del Bien', help='Registra el Numero de Serial del Bien Nacional', store=True)
    active = fields.Boolean ('Activo', default=True, help='Si esta Activo el motro lo icluira en la vista')          
    
    bienes_ubica_id  = fields.Many2one('ubicacion_fisica', 'Ubicacion Fisica del Bien', size=3, help='Registra la Ubicación Física del Bien')
    ubicacion_fisica_codigo = fields.Char(string='Codigo de la Ubicacion Física',
                    size=3,
                    help='Registra el Codigo de la Ubicacion Física (Interno)')
    costo = fields.Float('Costo de Bien', help='Registra el Costo del Bien',digits=(20, 7), required=True)

    detalle_adquisi_id = fields.Many2one('detalle_adquisi', 'Detalle de Aquisicion del Bien', size=3, required=True, 
                                          help ='Registra el detalle de la Adquisición del Bien')
    detalle_adquisi_codigo   = fields.Char(string='Código del Detalle',size=12,
                              help='Registra el Codigo del Detalle de la Adquisicion del Bien')

    forma_adquisicion_codigo = fields.Char(string='Codigo de la Forma de Adquisicion',size=3, required=True,
                                           help='Registra el Codigo de la Forma de Adquisicion')
    bienes_piso   = fields.Integer('Num. de Piso ',size=2, help='Registra el Piso donde se encuentra el Bien Nacional')
    tipo_estatus_inventario_id = fields.Many2one('tipo_estatus_inventario','Estatus de Inventario del Bien', required=True,
                                                 help='Registra el Estatus de Inventario')
    cod_estatus = fields.Char('Codigo del Estatus del Inventario',size=100, help='Registra el Codigo del Estatus de Inventario', required=True)
    observacion =   fields.Text('Observaciones al Bien', help='Registra las Observaciones al Bien')




    _sql_constraints = [('bieneslote_deta_rel', 'UNIQUE(oficinas_id, bienes_numbien)', 'El bien ya esta registrado!')] 
    
    _defaults = { 'active' : True,
                   }  
  
    @api.onchange('bienes_numbien')
    def onchange_bienes_numbien(self):
        if self.bienes_numbien:
            num_bien = self.bienes_numbien
            domain = [('bienes_numbien','=',num_bien)]            
            recordset= self.env['bienes'].search(domain)
            if recordset:
                self.bienes_numbien = ""
                for registro in recordset:
                    mensaje = "El número de bien [" + registro['bienes_numbien']  + "] ya se encuentra registrado"  
                    warning = {
                        'title': "Advertencia!",
                        'message': mensaje,
                }    
                return {'warning': warning }   
   
  
    #@api.onchange('bienes_numbien')
    #def validar_numero(self):    
    #    if self.bienes_numbien:
    #        num_bien = self.bienes_numbien
    #        domain = [('numbien','=',num_bien)]            
    #        recordset= self.env['control_bienes'].search(domain)
    #        if recordset:
    #            self.bienes_numbien = ""
    #            for registro in recordset:
    #                mensaje = "El número de bien registrado [" + registro['numbien']  + "] ya se encuentra registrado como un Bien [" + registro['tipo_bienes'] + "]"  
    #                warning = {
    #                    'title': "Advertencia!",
    #                    'message': mensaje,
    #            }    
    #            return {'warning': warning }    
          
          
        #numero = str(self.bienes_numbien)
        #wt = self.env['bienes'].search([('bienes_numbien', '=', numero)])
        #if wt.bienes_numbien:
        #   raise ValidationError("El numero de bien ya existe")
           
           
           
           
           
           
         
    @api.onchange('detalle_adquisi_id')
    def onchange_detalle_adquisi(self):
        codigo= ''
        codigoad =''
        codigo = self.detalle_adquisi_id.detalle_adquisi_codigo
        codigoad = self.detalle_adquisi_id.codigo_ad
        self.detalle_adquisi_codigo =  codigo
        self.forma_adquisicion_codigo = codigoad  
    
    @api.onchange('tipo_estatus_inventario_id')
    def onchange_tipo_estatus_inventario(self):
        codigo= ''
        codigo = self.tipo_estatus_inventario_id.cod_estatus
        self.cod_estatus =  codigo

    @api.onchange('bienes_ubica_id')
    def onchange_bienes_ubica(self):
        codigo= ''
        codigo = self.bienes_ubica_id.ubicacion_fisica_codigo
        self.ubicacion_fisica_codigo =  codigo




class bieneslote(models.Model):
    #_inherit ='bienes's
    """Registra carga de biene en lotes"""
    name = 'bieneslote'
    rec_name = 'id'
    order = 'id'  
    
    bienes_regiones_id  = fields.Many2one('regiones',string= 'Regiones de Ubicación de la Sede',size=3, required=True, help='Regiones de Ubicación de la Sede')    
    bienes_regiones_codigo = fields.Char(string='Codigo de la Región',size=3,required=True, help='Registra el Codigo de la Región')

    bienes_sedes_id  = fields.Many2one('sedes',string='Sedes del Organismo', domain="[('regiones_id','=',bienes_regiones_id)]",required=True, help='Registra el Codigo de Vinculacion con las Sedes del Organismo')
    bienes_sedes_codigo       = fields.Char(string='Código de la Sede',size=7,required=True, help='Registra el Código de la Sede')

    bienes_oficinas_id = fields.Many2one('oficinas', 'Oficina', size=3, domain="[('sedes_id','=',bienes_sedes_id)]",required=True,help='Registra la Oficina donde esta Ubicado el Bien')
    bienes_oficinas_codigo       = fields.Char(string='Nomenclatura de la Oficina',size=20,required=True, help='Registra la Nomenclatura de la Oficina')

    resp_uso_id = fields.Many2one('personas', 'Responsable de Uso', domain="[('personas_oficinas_id','=',bienes_oficinas_id)]", size=3, 
                                   required=True, help='Registra el Responsable del Uso del Bien')
    cedu_resp_uso = fields.Integer(string='Cédula del Responsable de Uso',size=10,required=True, help='Registra la Cedula de la persona')

    grupo_bien_id = fields.Many2one('grupo_bien', 'Grupo del Bien', size=3, domain="[('grupo_bien_codigo','!=',5) ,('grupo_bien_codigo','!=',16)]", required=True, help='Registra el Grupo al Cual Pertenece elBien')   
    grupo_bien_codigo =  fields.Char(string='Codigo del Grupo',size=3,  required=True,help='Registra el Codigo del Grupo (Interna)')

    clasificador_bien_id = fields.Many2one('clasificador_bien', 'Clasificador del Bien',required=True, domain="[('grupo_bien_id','=',grupo_bien_id)]", size=3, help='Registra el Codigo de Clase del Bien')
    clasificador_codigo = fields.Char(string='Codigo de la Clase',
                          size=3,
                          required=True,
                        
                          help='Registra el Codigo de la Clase del Bien (Interna)')
    modelo_bien_id = fields.Many2one('modelo_bien', 'Modelo del Bien', size=3,required=True, domain="[('clasificador_id','=',clasificador_bien_id)]", help='Registra el Modelo del Bien')   
    modelo_codigo = fields.Char(string='Codigo del Modelo',size=3,
                    required=True,
                    help='Registra el Codigo del Modelo (Interno)')
    detalle_modelo_id = fields.Many2one('detalle_modelo_bien', 'Detalle del Modelo del Bien', size=3, domain="[('modelo_id','=',modelo_bien_id)]", help='Registra el Modelo Especifico del Bien')
    detalle_modelo_codigo = fields.Char(string='Codigo del Detalle',
                            size=3,
                            
                            help='Registra el Codigo del Detalle del Modelo de Bienes (Interno)') 
                            
    bieneslote_deta_ids = fields.One2many('bieneslote_deta_rel','oficinas_id', string="Bienes", help='Registra el Numero de Bien')
    bienes_nombre  = fields.Text('Descripcion del Bien', size=300, help='Registra la Descripcion del Bien')
    fech_inventario = fields.Date('Fecha de Registro en el Inventario', size=8,
                      help='Registra la Fecha de Registro en el Inventario de la Oficina', required=True)   
    active = fields.Boolean ('Activo', default=True, help='Si esta Activo el motro lo icluira en la vista')    
    catalogo_sudebi_id = fields.Many2one('catalogo_sudebi', 'Categoría  General(SUDEBIP)', help='Registra el Catalogo General de la SUDEBIP',
                                         required=True)
    catalogo_sudebi_codigo   = fields.Char(string='Codigo de la Categoria',size=10,required=True, help='Codigo de la Categoria General de la (SUDEBIP)')
    catalogo_sudebi_sub_id = fields.Many2one('catalogo_sudebi_sub','Categoría  Sub-General(SUDEBIP)', domain="[('catalogo_sudebi_id','=',catalogo_sudebi_id)]", help='Registra la Categoria Sub- General de la SUDEBIP',
                                              required=True)
    catalogo_sudebi_sub_codigo  = fields.Char(string='Codigo de la SubCategoria',size=10,required=True, help='Codigo de la Categoria Sub-General de la (SUDEBIP)')
         
    catalogo_sudebi_esp_id = fields.Many2one('catalogo_sudebi_esp','Categoría  Específica (SUDEBIP)', domain="[('catalogo_sudebi_sub_id','=',catalogo_sudebi_sub_id)]",help='Registra la Categoria Específica de la SUDEBIP',
                                              required=True)
    catalogo_sudebi_esp_codigo   = fields.Char(string='Codigo de la Categoria Específica',size=10, help='Codigo de la Categoria Especifica de la (SUDEBIP)')
    color_sudebi_id = fields.Many2one('color_sudebi','Color segun (SUDEBIP)', help='Registra el Color segun SUDEBIP',required=True)
    color_sudebi_codigo = fields.Char(string='Codigo del Color segun Sudebip',size=3, help='Registra el Codigo de Color segun (SUDEBIP)')   
    marcas_id = fields.Many2one('marcas', 'Marca del Bien', size=3, help='Registra la Marca del Bien', required=True)
    marcas_codigo = fields.Char(string='Codigo de la Marca',
                    size=3,
                    help='Registra el Codigo de la Marca')
    modelo_fab_id = fields.Many2one('modelo_fab', 'Modelo de Fabrica', size=3, domain="[('marcas_id','=',marcas_id)]", 
                                     help='Registra el Modelo de Fabrica del Bien', required=True)
    modelo_fab_codigo = fields.Char(string='Codigo del Modelo',
                         size=3,
                        help='Registra el Codigo del Modelo de Fabrica')
    medidas = fields.Char('Medidas')                    
    estatus_uso_id = fields.Many2one('estatus_uso', 'Estatus de Uso', required=True,size=3, help='Registra el Estatus de Uso del Bien ')
    estatus_uso_codigo = fields.Char(string='Codigo del Estatus de Uso',size=3,
     help='Registra el Codigo de uso del bien')

    estado_bien_id = fields.Many2one('estado_bien', 'Estado del Bien', size=3, help='Registra el Estado del Bien')
    estado_bien_codigo = fields.Char(string='Codigo del Estado del Bien',size=3,required=True, help='Registra el Codigo del Estado del Bien')


     
    
    condicion_fisica_id = fields.Many2one('condicion_fisica', 'Condicion Física del Bien', size=3,help='Registra la Condicion Física del Bien')
    condicion_fisica_codigo = fields.Char(string='Codigo de la Condicion Fisica del Bien',size=3,required=True, help='Registra el Codigo de la Condicion Fisica del Bien')
    
    color_id = fields.Many2one('color', 'Color del Bien', size=3, required=True, help='Registra el Color del Bien')
    color_codigo = fields.Char(string='Codigo del Color',
                    size=3,
                    required=True,
                    help='Registra el Codigo de Color (Interno)')
    material_id = fields.Many2one('material', 'Material del Bien', required=True,size=3, help='Registra el Material con que esta hecho el Bien')
    material_codigo = fields.Char(string='Codigo del Material',
                      size=3,
                      help='Registra el Codigo del Material')
    bienes_ministerio_id =  fields.Many2one('bienes_ministerio',string='Información del Organismo para la Remisión', 
                                             help='Registra la Información del Organismo para la Remisión del Inventario',
                                             domain="[('bienes_ministerio_id','=',1)]", default=1)
    bienes_ministerio_codigo = fields.Char(string='Codigo de la Información del Organismo para la Remisión',
                      size=3,default='09',
                      help='Registra el Codigo de la Información del Organismo para la Remisión')
   
    tipo_bien_id      = fields.Many2one('tipo_bien',  'Tipo de Bien', size=10, help='Registra el Código del Tipo de Bien',
                        domain="[('tipo_bien_id','=',1)]", default=1)
    tipo_bien_codigo = fields.Char(string='Codigo del Tipo de Bien',size=10, help='Registra el Codigo del Tipo de Bien', default=1)

    poliza_id = fields.Many2one('poliza','Poliza de Seguro', size=3)
    poliza_codigo        = fields.Char(string='Codigo de la Poliza',size=3, help='Registra el Codigo de la Poliza')

    garantia = fields.Integer('Garantía',size=5,help='Registra la Garantía del Bien')
    unidad_garantia = fields.Selection([('1','Días'),('2','Meses'),('3','Años'),('99',"No Aplica")],'Unidad de Garantía',size=2,help='Registra la Unidad de Medida de la Garantía')
    fecha_ini_garantia = fields.Date('Fecha Inicio de la Garantía', size=8,help='Registra la Fecha de Inicio de la Garantía')
    fecha_fin_garantia = fields.Date('Fecha Fin de la Garantía', size=8,help='Registra la Fecha de Fin de la Garantía')
   



    _defaults = { 'active' : True,
                   'bi_estatus_inventario' :  'INVENTARIO',  } 
    
    @api.onchange('bienes_ministerio_id')
    def onchange_bienes_ministerio(self):
        codigobm= ''
        codigobm = self.bienes_ministerio_id.bienes_ministerio_codigo
        self.bienes_ministerio_codigo =  codigobm

    @api.onchange('estado_bien_id')
    def onchange_estado_bien(self):
        codigo= ''
        codigo = self.estado_bien_id.estado_bien_codigo
        self.estado_bien_codigo =  codigo   
    

    @api.onchange('estatus_uso_id')
    def onchange_estatus_uso(self):
        codigoes= ''
        codigoes = self.estatus_uso_id.estatus_uso_codigo
        self.estatus_uso_codigo =  codigoes   

    @api.onchange('condicion_fisica_id')
    def onchange_condicion_fisica(self):
        codigo= ''
        codigo = self.condicion_fisica_id.condicion_fisica_codigo
        self.condicion_fisica_codigo =  codigo


    @api.onchange('bienes_regiones_id')
    def onchange_bienes_regiones(self):
        codigor= ''
        codigor = self.bienes_regiones_id.regiones_codigo
        self.bienes_regiones_codigo =  codigor

    @api.onchange('bienes_sedes_id')
    def onchange_bienes_sedes(self):
        codigos= ''
        codigos = self.bienes_sedes_id.sedes_codigo
        self.bienes_sedes_codigo =  codigos

    @api.onchange('bienes_oficinas_id')
    def onchange_bienes_oficinas(self):
        codigoo= ''
        codigoo = self.bienes_oficinas_id.oficinas_codigo
        self.bienes_oficinas_codigo =  codigoo               

    
    @api.onchange('resp_uso_id')
    def onchange_resp_uso(self):
        codigore= ''
        codigore = self.resp_uso_id.personas_cedula
        self.cedu_resp_uso =  codigore

    @api.depends('bienes_oficinas_id')
    def guardaro_oficina(self):
         oficina = self.bienes_oficinas_id 

    @api.onchange('tipo_bien_id')
    def onchange_tipo_bien(self):
        codigo= ''
        codigo = self.tipo_bien_id.tipo_bien_codigo
        self.tipo_bien_codigo =  codigo
    
  

    @api.onchange('material_id')
    def onchange_material(self):
        codigoma= ''
        codigoma = self.material_id.material_codigo
        self.material_codigo =  codigoma

   
    @api.onchange('color_id')
    def onchange_color(self):
        codigoco= ''
        codigoco = self.color_id.color_codigo
        self.color_codigo =  codigoco


    @api.onchange('grupo_bien_id')
    def onchange_grupo(self):
        codigo= ''
        codigo = self.grupo_bien_id.grupo_bien_codigo
        self.grupo_bien_codigo =  codigo
        self.clasificador_bien_id = ''
          
    @api.onchange('clasificador_bien_id')
    def onchange_clasif(self):
        codigoc= ''
        codigoc = self.clasificador_bien_id.clasificador_codigo
        self.clasificador_codigo =  codigoc
        self.modelo_bien_id =  ''
    
    @api.onchange('modelo_bien_id')
    def onchange_modelo(self):
        codigom= ''
        codigom = self.modelo_bien_id.modelo_codigo
        self.modelo_codigo =  codigom
        self.detalle_modelo_id =  ''
    
    @api.onchange('detalle_modelo_id')
    def onchange_detalle_modelo(self):
        codigodm= ''
        codigodm = self.detalle_modelo_id.detalle_modelo_codigo
        self.detalle_modelo_codigo =  codigodm
    
    @api.onchange('grupo_bien_id','clasificador_bien_id','modelo_bien_id','detalle_modelo_id','material_id','color_id')
    def onchange_categorias(self):
        catego =''
        detamod = ''
       
        if self.clasificador_bien_id.clasificador_nombre:
            catego += str(self.clasificador_bien_id.clasificador_nombre)
        if self.modelo_bien_id.modelo_nombre:
              catego += ' '+ str(self.modelo_bien_id.modelo_nombre)
        if self.detalle_modelo_id.detalle_modelo_nombre:
            if self.detalle_modelo_id.detalle_modelo_nombre != False:
                catego += ' '+str(self.detalle_modelo_id.detalle_modelo_nombre)

        if self.material_id.material_nombre:
                catego += ' '+str(self.material_id.material_nombre)+ ' '

        if self.color_id.color_nombre:
                catego += str(self.color_id.color_nombre)
            
        #self.bienes_nombre = str(self.clasificador_bien_id.clasificador_nombre)+' '+ str(self.modelo_bien_id.modelo_nombre)+ ' ' + str(self.detalle_modelo_id.detalle_modelo_nombre).encode('utf-8') +' '+ str(self.material_id.material_nombre) +' '+ str(self.color_id.color_nombre)
        self.bienes_nombre = catego

        #grupo = self.grupo_bien_id

    @api.onchange('catalogo_sudebi_id')
    def onchange_catalogo_sudebi(self):
        codigo= ''
        codigo = self.catalogo_sudebi_id.catalogo_sudebi_codigo
        self.catalogo_sudebi_codigo =  codigo

    @api.onchange('catalogo_sudebi_sub_id')
    def onchange_catalogo_sudebi_sub(self):
        codigo= ''
        codigo = self.catalogo_sudebi_sub_id.catalogo_sudebi_sub_codigo
        self.catalogo_sudebi_sub_codigo =  codigo

    @api.onchange('catalogo_sudebi_esp_id')
    def onchange_catalogo_sudebi_esp(self):
        codigo= ''
        codigo = self.catalogo_sudebi_esp_id.catalogo_sudebi_esp_codigo
        self.catalogo_sudebi_esp_codigo =  codigo


    @api.onchange('color_sudebi_id')
    def onchange_color_sudebi(self):
        codigo= ''
        codigo = self.color_sudebi_id.color_sudebi_codigo
        self.color_sudebi_codigo =  codigo


    @api.onchange('poliza_id')
    def onchange_poliza(self):
        codigo= ''
        codigo = self.poliza_id.poliza_codigo
        self.poliza_codigo =  codigo
  
    @api.onchange('tipo_estatus_inventario_id')
    def onchange_tipo_estatus_inventario(self):
        codigo= ''
        codigo = self.tipo_estatus_inventario_id.cod_estatus
        self.cod_estatus =  codigo
    
    @api.onchange('marcas_id')
    def onchange_marcas(self):
        codigo= ''
        codigo = self.marcas_id.marcas_codigo
        self.marcas_codigo =  codigo

    @api.onchange('modelo_fab_id')
    def onchange_modelo_fab(self):
        codigo= ''
        codigo = self.modelo_fab_id.modelo_fab_codigo
        self.modelo_fab_codigo =  codigo   

  
 
    def pasar_lote(self):
        x = len(self.bieneslote_deta_ids)
        if x > 0:
            for registro in self.bieneslote_deta_ids:
                nroBienes = registro.bienes_numbien                  
                record = self.env['bienes'].create({ 
                                    'bienes_regiones_id' :        self.bienes_regiones_id.id,
                                    'bienes_regiones_codigo':     self.bienes_regiones_codigo,
                                    'bienes_sedes_id' :           self.bienes_sedes_id.id,
                                    'bienes_sedes_codigo':        self.bienes_sedes_codigo,
                                    'bienes_oficinas_id' :        self.bienes_oficinas_id.id,
                                    'bienes_oficinas_codigo':     self.bienes_oficinas_codigo,
                                    'grupo_bien_id' :             self.grupo_bien_id.id,
                                    'grupo_bien_codigo':          self.grupo_bien_codigo,
                                    'clasificador_bien_id' :      self.clasificador_bien_id.id,
                                    'clasificador_codigo':        self.clasificador_codigo,
                                    'modelo_bien_id' :            self.modelo_bien_id.id,
                                    'modelo_codigo':              self.modelo_codigo,
                                    'detalle_modelo_id' :         self.detalle_modelo_id.id,
                                    'detalle_modelo_codigo':      self.detalle_modelo_codigo,
                                    'fech_inventario' :           self.fech_inventario,
                                    'bienes_nombre':              self.bienes_nombre,
                                    'color_id'  :                 self.color_id.id,
                                    'color_codigo'  :             self.color_codigo,
                                    'marcas_id'  :                self.marcas_id.id,
                                    'marcas_codigo'  :            self.marcas_codigo, 
                                    'modelo_fab_id' :             self.modelo_fab_id.id,
                                    'modelo_fab_codigo' :         self.modelo_fab_codigo,
                                    'medidas' :                   self.medidas,  
                                    'color_sudebi_id':            self.color_sudebi_id.id, 
                                    'color_sudebi_codigo':        self.color_sudebi_codigo, 
                                    'condicion_fisica_id':        self.condicion_fisica_id.id,
                                    'condicion_fisica_codigo':    self.condicion_fisica_codigo,
                                    'estatus_uso_id':             self.estatus_uso_id.id,  
                                    'estatus_uso_codigo':         self.estatus_uso_codigo,  
                                    'estado_bien_id':             self.estado_bien_id.id,  
                                    'estado_bien_codigo':         self.estado_bien_codigo,
                                    'resp_uso_id':                self.resp_uso_id.id, 
                                    'cedu_resp_uso':              self.cedu_resp_uso,
                                    'bienes_ministerio_id' :      self.bienes_ministerio_id.id, 
                                    'bienes_ministerio_codigo' :  self.bienes_ministerio_codigo, 
                                    'material_id':                self.material_id.id, 
                                    'material_codigo':            self.material_codigo, 
                                    'catalogo_sudebi_id':         self.catalogo_sudebi_id.id, 
                                    'catalogo_sudebi_codigo':     self.catalogo_sudebi_codigo,
                                    'catalogo_sudebi_sub_id':     self.catalogo_sudebi_sub_id.id, 
                                    'catalogo_sudebi_sub_codigo': self.catalogo_sudebi_sub_codigo,
                                    'catalogo_sudebi_esp_id':     self.catalogo_sudebi_esp_id.id, 
                                    'catalogo_sudebi_esp_codigo': self.catalogo_sudebi_esp_codigo,
                                    'tipo_bien_id':               self.tipo_bien_id.id, 
                                    'tipo_bien_codigo':           self.tipo_bien_codigo,
                                    'poliza_id':                  self.poliza_id.id, 
                                    'poliza_codigo':              self.poliza_codigo,
                                    'garantia':                   self.garantia,
                                    'unidad_garantia':            self.unidad_garantia,
                                    'fecha_ini_garantia':         self.fecha_ini_garantia,
                                    'fecha_fin_garantia':         self.fecha_fin_garantia,
                                    'bienes_numbien' :            registro.bienes_numbien,
                                    'bienes_serial':              registro.serial,
                                    'bienes_ubica_id':            registro.bienes_ubica_id.id,    
                                    'ubicacion_fisica_codigo':    registro.ubicacion_fisica_codigo,
                                    'costo':                      registro.costo, 
                                    'detalle_adquisi_id':         registro.detalle_adquisi_id.id,
                                    'detalle_adquisi_codigo':     registro.detalle_adquisi_codigo,
                                    'forma_adquisicion_codigo':   registro.forma_adquisicion_codigo,
                                    'bienes_piso':                registro.bienes_piso,
                                    'tipo_estatus_inventario_id': registro.tipo_estatus_inventario_id .id,
                                    'cod_estatus':                registro.cod_estatus,
                                    'observacion':                registro.observacion
                                     })
                                     
                #Eliminar bienes en bieneslote_deta_rel                     
                select = "delete from bieneslote_deta_rel where bienes_numbien = '" + registro.bienes_numbien + "'"
                self.env.cr.execute(select)
                
                #Guardar registro de control bienes
                #"diccionario = {'numbien': nroBienes, 
                #            'tipo_bienes': 'MUEBLES',
                #}
                #control = self.env['control_bienes'].create(diccionario)
                                  
                #selectControl = "insert into control_bienes(numbien, tipo_bienes) values('" + nroBienes + "','MUEBLES')"
                #self.env.cr.execute(selectControl)
                
                
            return {
                 "name": "Bienes lotes",
                 "view_mode": "tree",
                 "res_model": "bieneslote",
                 "type": "ir.actions.act_window",
              
              }    
                  
           
        else:
            raise ValidationError('No existen Bienes que registrar')   


      
  

